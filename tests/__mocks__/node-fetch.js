// Mock implementation of node-fetch for testing
const fetch = jest.fn();

// Mock responses for different endpoints
const mockResponses = {
  'http://localhost:3001/api/test-wordpress': {
    ok: true,
    status: 200,
    json: async () => ({
      success: true,
      message: 'Connection successful'
    })
  },
  'http://localhost:3001/api/scan-git': {
    ok: true,
    status: 200,
    json: async () => ({
      success: true,
      data: {
        projects: [
          {
            name: 'test-project',
            path: '/path/to/test-project',
            branch: 'main',
            remote: 'git@github.com:user/test-project.git',
            commits: [
              {
                hash: 'abc123',
                message: 'Initial commit',
                author: 'Test User <test@example.com>',
                date: '2023-01-01T00:00:00Z',
                stats: {
                  insertions: 10,
                  deletions: 2
                },
                files: ['file1.txt', 'file2.js']
              }
            ]
          }
        ]
      }
    })
  },
  'http://localhost:3001/api/generate-article': {
    ok: true,
    status: 200,
    json: async () => ({
      success: true,
      article: '<h1>Test Article</h1><p>This is a test article generated by the system.</p>'
    })
  },
  'http://localhost:3001/api/publish-article': {
    ok: true,
    status: 200,
    json: async () => ({
      success: true,
      postId: 123,
      link: 'http://example.com/test-article'
    })
  }
};

// Default mock response
const defaultResponse = {
  ok: false,
  status: 404,
  json: async () => ({
    success: false,
    error: 'Endpoint not found'
  })
};

// Mock implementation
fetch.mockImplementation((url, options = {}) => {
  console.log(`Mock fetch called with URL: ${url}`);
  
  // Handle different HTTP methods
  const method = options.method || 'GET';
  
  // Find matching response or use default
  const response = mockResponses[url] || defaultResponse;
  
  // Return a new Promise that resolves to the response
  return Promise.resolve({
    ...response,
    statusText: response.ok ? 'OK' : 'Not Found',
    headers: new Map([
      ['content-type', 'application/json']
    ]),
    clone: function() {
      return this;
    }
  });
});

// Add methods to the mock
fetch.Response = class {
  constructor(body, init) {
    this.body = body;
    this.init = init;
  }
  
  json() {
    return Promise.resolve(this.body);
  }
};

// Export the mock
module.exports = fetch;
